Sure! Below are examples of MongoDB queries that utilize CRUD (Create, Read, Update, Delete) operations along with the `save` method and logical operators. I'll provide examples using the MongoDB shell, but these queries can also be adapted for use in various programming languages with MongoDB drivers.

### 1. Create (Insert)

#### Using `insertOne()`

```javascript
db.collectionName.insertOne({
    name: "Alice",
    age: 28,
    city: "New York"
});
```

#### Using `insertMany()`

```javascript
db.collectionName.insertMany([
    { name: "Bob", age: 34, city: "Los Angeles" },
    { name: "Charlie", age: 22, city: "Chicago" }
]);
```

### 2. Read (Query)

#### Simple Query

```javascript
db.collectionName.find({ name: "Alice" });
```

#### Query with Projection (Select Specific Fields)

```javascript
db.collectionName.find(
    { age: { $gt: 25 } }, // Condition: Age greater than 25
    { name: 1, city: 1 } // Projection: Only return name and city fields
);
```

#### Using Logical Operators

- **`$or` Operator**

```javascript
db.collectionName.find({
    $or: [
        { city: "New York" },
        { age: { $lt: 30 } } // Age less than 30
    ]
});
```

- **`$and` Operator**

```javascript
db.collectionName.find({
    $and: [
        { city: "Los Angeles" },
        { age: { $gt: 30 } } // Age greater than 30
    ]
});
```

- **`$not` Operator**

```javascript
db.collectionName.find({
    age: { $not: { $lt: 25 } } // Age not less than 25
});
```

### 3. Update

#### Using `updateOne()`

```javascript
db.collectionName.updateOne(
    { name: "Alice" }, // Condition to match
    { $set: { age: 29 } } // Update operation
);
```

#### Using `updateMany()`

```javascript
db.collectionName.updateMany(
    { city: "Chicago" }, // Condition to match
    { $set: { city: "Chicago City" } } // Update operation
);
```

#### Using `save()` Method

The `save()` method is useful when you want to insert a document if it doesn't exist or update it if it does. The document must contain the `_id` field for this method to work.

```javascript
db.collectionName.save({
    _id: ObjectId("607c35f3e081bb24a3f126e5"), // Existing document ID
    name: "Alice",
    age: 30,
    city: "New York"
});
```

### 4. Delete

#### Using `deleteOne()`

```javascript
db.collectionName.deleteOne({ name: "Alice" });
```

#### Using `deleteMany()`

```javascript
db.collectionName.deleteMany({ age: { $lt: 30 } }); // Delete all documents where age is less than 30
```

### Summary of CRUD Operations

- **Create**: Use `insertOne()` or `insertMany()`.
- **Read**: Use `find()`, optionally with projections and logical operators.
- **Update**: Use `updateOne()`, `updateMany()`, or `save()`.
- **Delete**: Use `deleteOne()` or `deleteMany()`.

### Conclusion

These examples demonstrate how to perform basic CRUD operations in MongoDB using the MongoDB shell. You can adapt these queries to your programming language of choice, such as Node.js, Python, Java, etc., using their respective MongoDB drivers. If you need examples in a specific programming language, feel free to ask!












MongoDB's aggregation framework provides powerful tools to process data and perform complex queries, including filtering, grouping, and transforming data. Indexing improves the performance of query execution by reducing the amount of data scanned. Below are examples of using both aggregation and indexing in MongoDB.

### Aggregation

The aggregation framework is used to process data records and return computed results. The pipeline approach allows you to perform multiple operations on your data in a sequence.

#### Basic Aggregation Example

Assume we have a collection named `sales` with the following documents:

```json
{ "_id": 1, "item": "apple", "price": 1.00, "quantity": 5, "date": "2024-11-01" }
{ "_id": 2, "item": "banana", "price": 0.50, "quantity": 10, "date": "2024-11-01" }
{ "_id": 3, "item": "orange", "price": 0.75, "quantity": 8, "date": "2024-11-02" }
{ "_id": 4, "item": "apple", "price": 1.00, "quantity": 6, "date": "2024-11-02" }
```

#### Aggregation Pipeline

1. **Total Sales by Item**

To calculate the total sales for each item:

```javascript
db.sales.aggregate([
    {
        $group: {
            _id: "$item", // Grouping by item
            totalSales: { $sum: { $multiply: ["$price", "$quantity"] } } // Calculate total sales
        }
    }
]);
```

**Output:**
```json
{ "_id": "apple", "totalSales": 11.00 }
{ "_id": "banana", "totalSales": 5.00 }
{ "_id": "orange", "totalSales": 6.00 }
```

2. **Filtering Sales**

You can filter the data before grouping. For example, if you only want to include sales from a specific date:

```javascript
db.sales.aggregate([
    { $match: { date: "2024-11-02" } }, // Filter for a specific date
    {
        $group: {
            _id: "$item",
            totalSales: { $sum: { $multiply: ["$price", "$quantity"] } }
        }
    }
]);
```

**Output:**
```json
{ "_id": "apple", "totalSales": 6.00 }
{ "_id": "orange", "totalSales": 6.00 }
```

### Indexing

Indexing improves the performance of queries by providing faster access to documents. You can create indexes on one or more fields in a collection.

#### Creating an Index

You can create an index on the `item` field to optimize queries that filter or sort by this field:

```javascript
db.sales.createIndex({ item: 1 }); // 1 for ascending order
```

#### Using the Index

Once the index is created, queries that use the `item` field will benefit from faster performance. For example:

```javascript
db.sales.find({ item: "apple" });
```

This query will use the index on the `item` field, making it faster than if the index did not exist.

### Compound Index

You can also create a compound index on multiple fields. For example, to index both `item` and `date`:

```javascript
db.sales.createIndex({ item: 1, date: 1 });
```

### Checking Indexes

To see the indexes on a collection, you can run:

```javascript
db.sales.getIndexes();
```

### Example Queries Using Indexes

1. **Querying with Index**

When querying with the `item` field, MongoDB uses the index:

```javascript
db.sales.find({ item: "banana" }); // This query will be fast due to the index
```

2. **Querying with Multiple Fields**

If you have a compound index on `item` and `date`, you can query efficiently using both fields:

```javascript
db.sales.find({ item: "apple", date: "2024-11-02" });
```

### Summary

- **Aggregation**: Use the aggregation pipeline to process data, including filtering, grouping, and calculating totals.
- **Indexing**: Create indexes to improve query performance on specific fields. Use single-field or compound indexes based on your query patterns.

These techniques will help you efficiently process and retrieve data from MongoDB. If you have specific queries or need further examples, feel free to ask!





MapReduce is a powerful data processing paradigm in MongoDB that allows you to perform complex operations on your data using JavaScript functions. The MapReduce process consists of two main steps: **Map** and **Reduce**. The **Map** function processes input data and emits key-value pairs, while the **Reduce** function processes these key-value pairs to aggregate the results.

### Example Scenario

Let's say we have a collection called `orders` that contains the following documents:

```json
{ "_id": 1, "item": "apple", "quantity": 10, "price": 1.00 }
{ "_id": 2, "item": "banana", "quantity": 5, "price": 0.50 }
{ "_id": 3, "item": "orange", "quantity": 8, "price": 0.75 }
{ "_id": 4, "item": "apple", "quantity": 6, "price": 1.00 }
{ "_id": 5, "item": "banana", "quantity": 10, "price": 0.50 }
```

### Goal

We want to calculate the total sales for each item by multiplying the quantity and price and summing the results.

### MapReduce Steps

1. **Map Function**: This function processes each document, emits a key-value pair where the key is the item name and the value is the total sales for that item (quantity multiplied by price).

2. **Reduce Function**: This function takes the emitted key-value pairs from the Map step and sums the values for each key.

### Implementation

Here's how to perform MapReduce in MongoDB using the above example:

#### Step 1: Define the Map and Reduce Functions

You can define the functions in JavaScript. Here are the functions we'll use:

- **Map Function**:

```javascript
var mapFunction = function() {
    emit(this.item, this.quantity * this.price); // Emit the item as key and total sales as value
};
```

- **Reduce Function**:

```javascript
var reduceFunction = function(key, values) {
    return Array.sum(values); // Sum the sales for each item
};
```

#### Step 2: Execute the MapReduce Operation

You can run the MapReduce operation using the `mapReduce` method:

```javascript
db.orders.mapReduce(
    mapFunction,      // The map function
    reduceFunction,   // The reduce function
    {
        out: "total_sales" // Output collection to store results
    }
);
```

### Step 3: View the Results

After executing the MapReduce operation, the results will be stored in a new collection called `total_sales`. You can query this collection to see the results:

```javascript
db.total_sales.find();
```

**Expected Output:**

```json
{ "_id": "apple", "value": 16.00 } // Total sales for apples: (10 * 1.00) + (6 * 1.00)
{ "_id": "banana", "value": 7.50 } // Total sales for bananas: (5 * 0.50) + (10 * 0.50)
{ "_id": "orange", "value": 6.00 } // Total sales for oranges: (8 * 0.75)
```

### Summary

- **MapReduce**: A powerful way to perform complex aggregations on data in MongoDB using custom JavaScript functions.
- **Steps**: Define a Map function to emit key-value pairs, a Reduce function to aggregate the results, and run the operation to store the output in a collection.

### Important Notes

- **Performance**: While MapReduce is flexible, it's generally slower than using the aggregation framework for similar tasks. Consider using the aggregation framework for better performance whenever possible.
- **Data Size**: MapReduce is particularly useful for large datasets where you need complex processing that might not be achievable with simple queries.

If you have more questions or need further examples, feel free to ask!








The code you have shared is a Python script that connects to a MongoDB database and provides a simple interactive menu-driven interface to perform CRUD (Create, Read, Update, Delete) operations on documents within a specific MongoDB collection.

### Step-by-Step Breakdown of the Code:

#### 1. **MongoDB Connection**

```python
from pymongo import MongoClient

# MongoDB connection URI
MONGO_URI = "mongodb://localhost:27017/"  # Replace with your MongoDB URI if different

# Create a MongoDB client
client = MongoClient(MONGO_URI)

# Define the database and collection
db = client["ass12"]  # Replace with your actual database name
collection = db["connectivity"]  # Replace with your actual collection name
```

- **`from pymongo import MongoClient`**: This imports the `MongoClient` class from the `pymongo` library, which is used to interact with MongoDB from Python.
  
- **`MONGO_URI = "mongodb://localhost:27017/"`**: This is the MongoDB URI used to connect to the MongoDB server. By default, MongoDB runs on `localhost` at port `27017`. If your MongoDB instance is hosted elsewhere, you would replace this URI with the correct address.

- **`client = MongoClient(MONGO_URI)`**: This line establishes a connection to the MongoDB server using the provided URI.

- **`db = client["ass12"]`**: This selects the database named `"ass12"`. If the database doesn't exist, MongoDB will automatically create it once you insert documents into it.

- **`collection = db["connectivity"]`**: This selects the collection named `"connectivity"` in the `"ass12"` database. A collection is similar to a table in a relational database.

#### 2. **CRUD Operations**

The script defines four CRUD operation functions. These functions interact with the MongoDB collection to insert, retrieve, update, or delete documents.

---

**Create Operation**: Adds a new document to the collection.

```python
def create_document(data):
    try:
        result = collection.insert_one(data)
        print("Document created with ID:", result.inserted_id)
    except Exception as e:
        print("Error creating document:", e)
```

- **`insert_one(data)`**: This function inserts a single document (specified by `data`) into the collection.
- If the insertion is successful, the inserted document's ID (`inserted_id`) is printed.
- If an error occurs, it is caught by the `except` block and printed.

---

**Read Operation**: Retrieves and prints documents from the collection.

```python
def read_documents(query=None):
    try:
        # Find all documents if no query is provided
        documents = collection.find(query or {})
        for doc in documents:
            print(doc)
    except Exception as e:
        print("Error reading documents:", e)
```

- **`find(query or {})`**: The `find` method retrieves documents that match the query. If no query is passed (i.e., `query=None`), it fetches all documents in the collection.
- It then iterates over the result and prints each document.
- Errors are caught by the `except` block and printed.

---

**Update Operation**: Modifies an existing document based on a query.

```python
def update_document(query, new_values):
    try:
        result = collection.update_one(query, {"$set": new_values})
        if result.matched_count > 0:
            print("Document updated successfully.")
        else:
            print("No matching document found.")
    except Exception as e:
        print("Error updating document:", e)
```

- **`update_one(query, {"$set": new_values})`**: This updates a single document that matches the `query` with the `new_values`. The `$set` operator is used to modify the fields of the document.
- **`matched_count > 0`**: This checks if any documents were matched by the query. If a document is updated, a success message is printed; otherwise, a message saying "No matching document found" is printed.

---

**Delete Operation**: Deletes a document based on a query.

```python
def delete_document(query):
    try:
        result = collection.delete_one(query)
        if result.deleted_count > 0:
            print("Document deleted successfully.")
        else:
            print("No matching document found.")
    except Exception as e:
        print("Error deleting document:", e)
```

- **`delete_one(query)`**: This deletes a single document that matches the `query`. 
- **`deleted_count > 0`**: This checks if any documents were deleted. If so, a success message is printed; otherwise, a message saying "No matching document found" is printed.

---

#### 3. **Menu Function**

The `menu()` function creates an interactive command-line interface, where the user can choose which CRUD operation to perform.

```python
def menu():
    while True:
        print("\nMenu:")
        print("1. Create Document")
        print("2. Read Documents")
        print("3. Update Document")
        print("4. Delete Document")
        print("5. Exit")
        choice = input("Select an option (1-5): ")
```

- The `menu()` function runs a `while` loop that continuously displays the menu options until the user chooses to exit.
- The `input()` function takes user input and assigns it to the `choice` variable.

---

#### 4. **Handling User Input**

For each menu option (1–5), the program prompts the user to enter the necessary information to perform the CRUD operation.

**Create Operation**:
```python
if choice == '1':
    name = input("Enter name: ")
    age = int(input("Enter age: "))
    city = input("Enter city: ")
    data = {"name": name, "age": age, "city": city}
    create_document(data)
```
- The user is prompted for `name`, `age`, and `city`.
- A dictionary `data` is created with these values, and the `create_document(data)` function is called to insert the document into the collection.

**Read Operation**:
```python
elif choice == '2':
    print("\nAll documents in collection:")
    read_documents()
```
- The function `read_documents()` is called without a query, meaning all documents in the collection will be printed.

**Update Operation**:
```python
elif choice == '3':
    name = input("Enter name of the document to update: ")
    new_age = int(input("Enter new age: "))
    query = {"name": name}
    new_values = {"age": new_age}
    update_document(query, new_values)
```
- The user is prompted to input a `name` for the document to be updated and a new `age`.
- The `update_document(query, new_values)` function is called, which updates the document where `name` matches the provided value.

**Delete Operation**:
```python
elif choice == '4':
    name = input("Enter name of the document to delete: ")
    query = {"name": name}
    delete_document(query)
```
- The user is prompted for the `name` of the document to delete.
- The `delete_document(query)` function is called to delete the matching document.

**Exit**:
```python
elif choice == '5':
    print("Exiting the program.")
    break
```
- The user can choose to exit the program by entering `5`. This will break the `while` loop and stop the program.

---

#### 5. **Running the Menu**

```python
if __name__ == "__main__":
    menu()
```

- The `menu()` function is called when the script is executed directly. This starts the interactive menu.

---

### Summary

- The program allows users to perform **CRUD operations** on a MongoDB collection using an interactive menu.
- The `MongoClient` connects to the MongoDB server and allows operations like inserting, reading, updating, and deleting documents.
- The `menu()` function facilitates the user interaction with the program, making it simple to manage MongoDB data through the command line.